{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\React JS\\\\React-Complete Guide (Udemy)\\\\UserManager_React\\\\src\\\\components\\\\Users\\\\AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Card from \"../UI/Card\";\nimport Button from \"../UI/Button\";\nimport styles from \"./AddUser.module.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Wrapper from \"../Helpers/Wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const ageInputRef = useRef(); //---- useStates to collect user inputs\n  //const [enteredUserName, setEnteredUserName] = useState(\"\");\n  //const [enteredAge, setEnteredAge] = useState(\"\");\n  //---- We no longer need these useStates/States here since we are making use of Ref\n\n  const [error, setError] = useState();\n  /*\r\n  //----We no longer need these userName and age handler functions as we are now using ref\r\n  //----username handler\r\n  const userNameChangedHandler = (event) => {\r\n    setEnteredUserName(event.target.value);\r\n  };\r\n    // age change handler\r\n  const ageChangedHandler = (event) => {\r\n    setEnteredAge(event.target.value);\r\n  };\r\n  */\n  //Add user handler\n\n  const addUserHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value; //----if state isValid is false then we should not proceed with handler\n\n    if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: \"Invalid input\",\n        message: \"Please enter a valid name and age (non-empty values).\"\n      });\n      return;\n    } //Generally in javascript and in DOM all the input will be in string but by just comparing it <1 will work.\n    //But to super safe we can prepent enteredAge with '+' symbol (+enteredAge)\n\n\n    if (+enteredUserAge < 1) {\n      setError({\n        title: \"Invalid age\",\n        message: \"Please enter a valid age (>0).\"\n      });\n      return;\n    }\n\n    props.onAddUser(enteredName, enteredUserAge); //----Reseting the values\n    // setEnteredUserName(\"\");\n    // setEnteredAge(\"\");\n    // We no longer need there reset functions as we are using Ref\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    /*#__PURE__*/\n    //Instead of our created <Wrapper/> component. We can user React built-in Fragment i.e.<React.Fragment></React.Fragment>  or <></>\n    //Note that <> </> is based on your project setup hence may not work everywhere whereas fragment would work.\n    _jsxDEV(Wrapper, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        title: error.title,\n        message: error.message,\n        onConfirm: errorHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: styles.input,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addUserHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            type: \"text\"\n            /*  As we are using Ref, this is no longer require.\r\n            value={enteredUserName}            \r\n            onChange={userNameChangedHandler} */\n            ,\n            ref: nameInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"age\",\n            children: \"Age (Years)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"age\",\n            type: \"number\"\n            /*  As we are using Ref, this is no longer require.\r\n            value={enteredAge}\r\n            onChange={ageChangedHandler} */\n            ,\n            ref: ageInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Add User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AddUser, \"oeh9P4do1L6ON2Ex+93ODUUduFk=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["D:/Learning/React JS/React-Complete Guide (Udemy)/UserManager_React/src/components/Users/AddUser.js"],"names":["React","useState","useRef","Card","Button","styles","ErrorModal","Wrapper","AddUser","props","nameInputRef","ageInputRef","error","setError","addUserHandler","event","preventDefault","enteredName","current","value","enteredUserAge","trim","length","title","message","onAddUser","errorHandler","input"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport Button from \"../UI/Button\";\r\nimport styles from \"./AddUser.module.css\";\r\nimport ErrorModal from \"../UI/ErrorModal\";\r\n\r\nimport Wrapper from \"../Helpers/Wrapper\";\r\n\r\nconst AddUser = (props) => {\r\n  const nameInputRef = useRef();\r\n  const ageInputRef = useRef();\r\n\r\n  //---- useStates to collect user inputs\r\n  //const [enteredUserName, setEnteredUserName] = useState(\"\");\r\n  //const [enteredAge, setEnteredAge] = useState(\"\");\r\n  //---- We no longer need these useStates/States here since we are making use of Ref\r\n\r\n\r\n  const [error, setError] = useState();\r\n  \r\n  /*\r\n  //----We no longer need these userName and age handler functions as we are now using ref\r\n  //----username handler\r\n  const userNameChangedHandler = (event) => {\r\n    setEnteredUserName(event.target.value);\r\n  };\r\n\r\n  // age change handler\r\n  const ageChangedHandler = (event) => {\r\n    setEnteredAge(event.target.value);\r\n  };\r\n */\r\n  //Add user handler\r\n  const addUserHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredName= nameInputRef.current.value;\r\n    const enteredUserAge=ageInputRef.current.value;\r\n    //----if state isValid is false then we should not proceed with handler\r\n\r\n    if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {\r\n      setError({\r\n        title: \"Invalid input\",\r\n        message: \"Please enter a valid name and age (non-empty values).\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    //Generally in javascript and in DOM all the input will be in string but by just comparing it <1 will work.\r\n    //But to super safe we can prepent enteredAge with '+' symbol (+enteredAge)\r\n    if (+enteredUserAge < 1) {\r\n      setError({\r\n        title: \"Invalid age\",\r\n        message: \"Please enter a valid age (>0).\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    props.onAddUser(enteredName, enteredUserAge);\r\n\r\n    //----Reseting the values\r\n   // setEnteredUserName(\"\");\r\n    // setEnteredAge(\"\");\r\n    // We no longer need there reset functions as we are using Ref\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setError(null);\r\n  };\r\n  return (\r\n    //Instead of our created <Wrapper/> component. We can user React built-in Fragment i.e.<React.Fragment></React.Fragment>  or <></>\r\n    //Note that <> </> is based on your project setup hence may not work everywhere whereas fragment would work.\r\n    <Wrapper>\r\n      {error && (\r\n        <ErrorModal\r\n          title={error.title}\r\n          message={error.message}\r\n          onConfirm={errorHandler}\r\n        />\r\n      )}\r\n      <Card className={styles.input}>\r\n        <form onSubmit={addUserHandler}>\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            id=\"username\"\r\n            type=\"text\"\r\n            /*  As we are using Ref, this is no longer require.\r\n            value={enteredUserName}            \r\n            onChange={userNameChangedHandler} */\r\n            ref={nameInputRef}\r\n          />\r\n\r\n          <label htmlFor=\"age\">Age (Years)</label>\r\n          <input\r\n            id=\"age\"           \r\n            type=\"number\"\r\n            /*  As we are using Ref, this is no longer require.\r\n            value={enteredAge}\r\n            onChange={ageChangedHandler} */\r\n            ref={ageInputRef}\r\n          />\r\n          <Button type=\"submit\">Add User</Button>\r\n        </form>\r\n      </Card>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n"]},"metadata":{},"sourceType":"module"}